// === CRYPTO SHIM (untuk Baileys) ===
(() => {
  try {
    const nodeCrypto = require('node:crypto');
    if (!globalThis.crypto) globalThis.crypto = nodeCrypto.webcrypto || nodeCrypto;
  } catch {
    try {
      const c = require('crypto');
      if (!globalThis.crypto) globalThis.crypto = c;
    } catch {}
  }
})();

require('dotenv').config({ path: __dirname + '/.env' });

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const QR = require('qrcode');

// ---------- optional modules ----------
let checkMetroStatus = null;
try { checkMetroStatus = require('./checkMetroStatus'); }
catch { console.error('WARN: checkMetroStatus.js tidak ditemukan. /cek akan gagal.'); }

let buildCekCommandFromText = (t)=>({cmd:null,list:[],note:'textToCommand.js tidak ada'});
try { ({ buildCekCommandFromText } = require('./textToCommand')); } catch {}

// ---------- Admin store (persisten) ----------
let adminStore = null;
try { adminStore = require('./adminStore'); adminStore.seedFromEnv?.(); }
catch {
  const FILE = path.join(__dirname,'admins.json');
  function _read(){ try{ if(!fs.existsSync(FILE)) return {admins:[]}; return JSON.parse(fs.readFileSync(FILE,'utf8')||'{"admins":[]}'); }catch{return{admins:[]}} }
  function _write(o){ try{ fs.writeFileSync(FILE, JSON.stringify(o,null,2)); }catch{} }
  function seedFromEnv(){
    const ids = String(process.env.ADMIN_IDS||'').split(',').map(s=>s.trim()).filter(Boolean).map(x=>String(Number(x))).filter(Boolean);
    if(!ids.length) return;
    const o=_read(); const set=new Set((o.admins||[]).map(String));
    ids.forEach(i=>set.add(i)); o.admins=[...set]; _write(o);
  }
  function listAdmins(){ return (_read().admins||[]).map(String); }
  function isAdmin(id){ return listAdmins().includes(String(id)); }
  function addAdmin(id){ const sid=String(Number(id)); if(!sid||sid==='NaN') throw new Error('ID tidak valid'); const o=_read(); const set=new Set((o.admins||[]).map(String)); set.add(sid); o.admins=[...set]; _write(o); return o.admins; }
  function removeAdmin(id){ const sid=String(Number(id)); const o=_read(); o.admins=(o.admins||[]).map(String).filter(x=>x!==sid); _write(o); return o.admins; }
  adminStore = { seedFromEnv, listAdmins, isAdmin, addAdmin, removeAdmin };
  adminStore.seedFromEnv();
}

// ---------- Telegram init ----------
const token = process.env.TELEGRAM_BOT_TOKEN || '';
if (!token) { console.error('ERROR: TELEGRAM_BOT_TOKEN kosong di .env'); process.exit(1); }
const bot = new TelegramBot(token, { polling: { interval: 800, autoStart: true } });

let lastChatId = null;
bot.on('message', (m)=>{ lastChatId = m.chat && m.chat.id; });

bot.getMe().then(me=>console.log(`Telegram bot: @${me.username} (id:${me.id})`)).catch(e=>console.error('getMe error:', e?.message));
bot.on('polling_error', (err)=> console.error('polling_error:', err?.response?.body || err?.message || err));

// ---------- Safe long message (pemecah otomatis) ----------
function splitSmart(text, max=3900){
  const t = String(text ?? '');
  if (t.length <= max) return [t];
  const out = [];
  let rest = t;
  while (rest.length){
    if (rest.length <= max){ out.push(rest); break; }
    // potong di newline/spasi terdekat
    const slice = rest.slice(0, max);
    let cut = Math.max(slice.lastIndexOf('\n'), slice.lastIndexOf(' '));
    if (cut < max * 0.5) cut = max; // kalau boundary terlalu jauh, hard cut
    out.push(slice.slice(0, cut));
    rest = rest.slice(cut);
  }
  return out.filter(Boolean);
}
const _origSend = bot.sendMessage.bind(bot);
bot.sendMessage = async (chatId, text, extra={}) => {
  if (typeof text !== 'string') return _origSend(chatId, text, extra);
  const parts = splitSmart(text, 3900);
  let last; 
  for (const p of parts){
    const safeExtra = { ...extra };
    if (safeExtra.parse_mode) delete safeExtra.parse_mode;
    last = await _origSend(chatId, p, safeExtra);
  }
  return last;
};
bot.sendLong = async (chatId, text, extra={}) => bot.sendMessage(chatId, text, extra);

// ---------- Helper: notif admin ----------
async function sendToAdmins(text, opts = {}) {
  try {
    let ids = [];
    try { ids = (adminStore?.listAdmins?.()||[]).map(String); } catch {}
    if (!ids.length) {
      ids = String(process.env.ADMIN_IDS || '').split(',').map(v => v.trim()).filter(Boolean);
    }
    if (!ids.length && lastChatId) ids = [String(lastChatId)];
    for (const id of ids) { try { await bot.sendMessage(id, text, opts); } catch {} }
  } catch {}
}

// ---------- History ----------
const historyFilePath = path.join(__dirname,'history.json');
let history = [];
try { if (fs.existsSync(historyFilePath)) history = JSON.parse(fs.readFileSync(historyFilePath,'utf8')||'[]'); } catch {}
function saveHistory(){ try{ fs.writeFileSync(historyFilePath, JSON.stringify(history,null,2)); }catch{} }
function isDuplicate(ne1, ne2){ return history.some(h => (h.ne1===ne1 && h.ne2===ne2) || (h.ne1===ne2 && h.ne2===ne1)); }
function addHistory(ne1, ne2, result, name, startTime, endTime){
  if (ne2 && isDuplicate(ne1, ne2)) return;
  const timestamp = new Date(startTime).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' });
  const shortNe1 = (ne1.split('-')[1]||ne1).slice(0,4);
  const shortNe2 = ne2 ? (ne2.split('-')[1]||ne2).slice(0,4) : '';
  const duration = (endTime - startTime) / 1000;
  history.push({ name, ne1, ne2: ne2||'', shortNe1, shortNe2, result, timestamp, duration });
  saveHistory();
}
function createHistoryButtons(){
  return history.map((entry, idx) => ([
    { text: `Ulangi ${entry.shortNe1}${entry.shortNe2?` ↔ ${entry.shortNe2}`:''}`, callback_data: `retry_${idx}` },
    { text: `Hapus ${entry.shortNe1}${entry.shortNe2?` ↔ ${entry.shortNe2}`:''}`, callback_data: `delete_${idx}` },
  ]));
}

// ---------- runWithTimeout ----------
function runWithTimeout(promise, ms){
  return Promise.race([
    promise,
    new Promise((_,rej)=>setTimeout(()=>rej(new Error(`Timeout ${ms}ms`)), ms))
  ]);
}

// ---------- WhatsApp (opsional) ----------
let WA_ENABLED = (String(process.env.WA_ENABLED||'false').toLowerCase()==='true');
let waClient=null, makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion;
try { ({ default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } = require('@whiskeysockets/baileys')); } catch {}

async function waStart(notifyChatId){
  if (!WA_ENABLED) return;
  if (waClient || !makeWASocket) return;
  const { state, saveCreds } = await useMultiFileAuthState(path.join(__dirname,'wa_auth'));
  let version = [2,3000,0]; try { ({ version } = await fetchLatestBaileysVersion()); } catch {}

  const sock = makeWASocket({
    version,
    auth: state,
    printQRInTerminal: false,
    syncFullHistory: false,
    browser: ['cekrsltele','Chrome','1.0']
  });

  waClient = sock;
  sock.ev.on('creds.update', saveCreds);
  sock.ev.on('connection.update', (u) => {
    const { connection, lastDisconnect, qr } = u;

    if (qr && notifyChatId) {
      (async () => {
        try {
          const buf = await QR.toBuffer(qr, { type: 'png', scale: 8, margin: 1 });
          await bot.sendPhoto(notifyChatId, buf, {
            caption: '📲 Scan QR WhatsApp berikut (±60 detik). Jika kadaluarsa, kirim /wa_pair lagi.'
          });
        } catch (e) {
          try {
            const qrt = require('qrcode-terminal');
            let ascii=''; qrt.generate(qr,{small:true}, c=>ascii=c);
            await bot.sendMessage(notifyChatId, 'QR WhatsApp (fallback ASCII):\n\n'+ascii);
          } catch (e2) {
            await bot.sendMessage(notifyChatId, 'Gagal membuat QR image: ' + (e && e.message ? e.message : e));
          }
        }
      })();
    }

    if (connection === 'open') {
      if (notifyChatId) bot.sendMessage(notifyChatId, '✅ WhatsApp tersambung.');
    } else if (connection === 'close') {
      const reason = (lastDisconnect && lastDisconnect.error && lastDisconnect.error.message) || 'Terputus';
      if (notifyChatId) bot.sendMessage(notifyChatId, '⚠️ WhatsApp terputus: ' + reason);
      waClient = null;
      if (WA_ENABLED) setTimeout(()=>waStart(notifyChatId), 5000);
    }
  });
}
async function waStop(){ try{ if(waClient?.ws) waClient.ws.close(); }catch{} try{ await waClient?.end?.(); }catch{} waClient=null; }
function waStatusText(){ return 'WA_ENABLED='+WA_ENABLED+' | status='+(waClient?'CONNECTED':'OFFLINE'); }

// ---------- HELP ----------
const HELP_TEXT =
`📋 *Perintah Utama*
/help — daftar perintah
/cek <NE1> [NE2] — cek RX/Port (1 atau 2 sisi)
/history — tombol riwayat

📋 *Admin*
/add_admin <id>
/remove_admin <id>
/admins — list admin

📲 *WhatsApp*
/wa_status
/wa_enable
/wa_disable
/wa_pair — kirim QR ke sini`;

function isCommand(txt){ return typeof txt === 'string' && txt.trim().startsWith('/'); }
function isAdminId(id){ return adminStore?.isAdmin?.(String(id)) || false; }

// ---------- Handlers ----------
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();
  const low = text.toLowerCase();

  // /help
  if (low === '/help') { return bot.sendMessage(chatId, HELP_TEXT, { parse_mode: 'Markdown' }); }

  // Admin commands (tanpa warning unknown)
  if (low.startsWith('/add_admin ')) {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    const id = text.split(' ')[1]; 
    try { adminStore.addAdmin(id); return bot.sendMessage(chatId, `✅ Admin ditambah: ${id}`); }
    catch(e){ return bot.sendMessage(chatId, '❌ Gagal: '+(e?.message||e)); }
  }
  if (low.startsWith('/remove_admin ')) {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    const id = text.split(' ')[1];
    try { adminStore.removeAdmin(id); return bot.sendMessage(chatId, `✅ Admin dihapus: ${id}`); }
    catch(e){ return bot.sendMessage(chatId, '❌ Gagal: '+(e?.message||e)); }
  }
  if (low === '/admins') {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    const list = (adminStore.listAdmins?.()||[]).join(', ') || '(kosong)';
    return bot.sendMessage(chatId, '👑 Admins: ' + list);
  }

  // WA controls via Telegram
  if (low === '/wa_status') return bot.sendMessage(chatId, 'ℹ️ ' + waStatusText());
  if (low === '/wa_enable') {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    WA_ENABLED = true; await bot.sendMessage(chatId, '✅ WA_ENABLED=true'); await waStart(chatId); return;
  }
  if (low === '/wa_disable') {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    WA_ENABLED = false; await waStop(); return bot.sendMessage(chatId, '✅ WA dimatikan');
  }
  if (low === '/wa_pair') {
    if (!isAdminId(msg.from.id)) return bot.sendMessage(chatId, '❌ Admin only.');
    await waStart(chatId); return;
  }

  // ===== /cek =====
  if (/^\/cek(\s+|$)/.test(low)) {
    const tail = text.slice(4); // hilangkan "/cek"
    const parts = tail.split(/\s+/).map(s=>s.trim()).filter(Boolean);

    // 1 NE
    if (parts.length === 1) {
      const ne = parts[0];
      await bot.sendMessage(chatId, `🔄 Cek satu NE: ${ne}…`);
      try {
        const start = Date.now();
        const result = await runWithTimeout(
          checkMetroStatus && checkMetroStatus.checkSingleNE
            ? checkMetroStatus.checkSingleNE(ne)
            : Promise.reject(new Error('checkSingleNE tidak tersedia')),
          Number(process.env.CEK_TIMEOUT_MS || 120000)
        );
        const end = Date.now();
        addHistory(ne, null, result, ne, start, end);
        return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`);
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 1 NE: '+(e?.message||e));
      }
    }

    // 2 NE
    if (parts.length >= 2) {
      const ne1 = parts[0], ne2 = parts[1];
      await bot.sendMessage(chatId, `🔄 Checking`);
      try {
        const start = Date.now();
        const timeout = Number(process.env.CEK_TIMEOUT_MS || 180000);
const combined = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), timeout);
const end = Date.now();
addHistory(ne1, ne2, combined, `${ne1} ${ne2}`, start, end);
        return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${combined}`, {
          reply_markup: { inline_keyboard: [[{ text: '🔁 CEK ULANG', callback_data: `retry_last_${history.length-1}` }]] }
        });
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 2 sisi: '+(e?.message||e));
      }
    }

    // salah format
    return bot.sendMessage(chatId, '⛔ Format: /cek <NE1> [NE2]');
  }

  // ===== /history =====
  if (low === '/history') {
    if (!history.length) return bot.sendMessage(chatId, '❌ Belum ada riwayat pengecekan.');
    return bot.sendMessage(chatId, '👉 Klik di bawah untuk cek ulang atau hapus riwayat:', {
      reply_markup: { inline_keyboard: createHistoryButtons() }
    });
  }

  // ===== Teks bebas -> parsing NE =====
  if (text && !isCommand(text)) {
    const { list } = buildCekCommandFromText(text);
    if (list && list.length === 1) {
      const ne = list[0];
      return bot.sendMessage(chatId, `ℹ️ Hanya menemukan 1 NE dari teks.\nNE terdeteksi: ${ne}\n\nGunakan perintah ini:\n/cek ${ne}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek1_${ne}` }]] }
      });
    }
    if (list && list.length >= 2) {
      const a = list[0], b = list.find(x=>x!==a) || list[1];
      return bot.sendMessage(chatId, `NE terdeteksi: ${list.join(', ')}\n\nGunakan perintah ini:\n/cek ${a} ${b}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek_${a}_${b}` }]] }
      });
    }
    // bukan perintah & tidak terparse → diam (tanpa warning)
    return;
  }

  // Jika perintah tidak dikenali (bukan admin command), beri warning lembut
  if (isCommand(text)) {
    const adminCmds = ['/add_admin','/remove_admin','/admins','/wa_status','/wa_enable','/wa_disable','/wa_pair','/help','/cek','/history'];
    const base = text.split(/\s+/)[0];
    if (!adminCmds.includes(base)) {
      return bot.sendMessage(chatId, 'ℹ️ Perintah tidak dikenali.\nKetik /help untuk daftar perintah.');
    }
  }
});

// ---------- Callback (cek ulang, run now, hapus) ----------
bot.on('callback_query', async (q)=>{
  const { data, message } = q;
  const chatId = message.chat.id;
  try {
    await bot.answerCallbackQuery(q.id);

    if (data.startsWith('runcek_')) {
      const [, ne1, ne2] = data.split('_');
      await bot.sendMessage(chatId, `🔄 Checking: ${ne1} ↔ ${ne2}...`);
      const timeout = Number(process.env.CEK_TIMEOUT_MS || 180000);
const combined = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), timeout);
const end = Date.now();
      return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${combined}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${ne1}_${ne2}` }]] }
      });
    }

    if (data.startsWith('runcek1_')) {
      const ne = data.substring('runcek1_'.length);
      await bot.sendMessage(chatId, `🔄 Checking: ${ne}...`);
      const result = await runWithTimeout(checkMetroStatus.checkSingleNE(ne), Number(process.env.CEK_TIMEOUT_MS || 120000));
      const end = Date.now();
      return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${ne}` }]] }
      });
    }

    if (data.startsWith('retry_')) {
      let index = null;
      if (data.startsWith('retry_last_')) index = parseInt(data.split('_').pop(), 10);
      else index = parseInt(data.split('_')[1], 10);
      const e = history[index];
      if (e) {
        if (!e.ne2) {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1}...`);
          const result = await runWithTimeout(checkMetroStatus.checkSingleNE(e.ne1), Number(process.env.CEK_TIMEOUT_MS || 120000));
          const end = Date.now();
          return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${e.ne1}` }]] }
          });
        } else {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1} ↔ ${e.ne2}...`);
          const timeout = Number(process.env.CEK_TIMEOUT_MS || 180000);
const combined = await runWithTimeout(checkMetroStatus(e.ne1, e.ne2, { mode: 'normal' }), timeout);
const end = Date.now();
          return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${combined}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${e.ne1}_${e.ne2}` }]] }
          });
        }
      }
    }

    if (data.startsWith('delete_')) {
  const index = parseInt(data.split('_')[1], 10);
  const e = history[index];
  if (e) {
    // Hapus dari memori & simpan
    history.splice(index, 1);
    saveHistory();

    // Header & keyboard terbaru
    const headerText = history.length
      ? '👈 Pilih item di bawah untuk cek ulang atau hapus riwayat:'
      : '❌ Belum ada riwayat pengecekan.';

    try {
      // Edit pesan /history yang sedang tampil
      await bot.editMessageText(headerText, {
        chat_id: message.chat.id,
        message_id: message.message_id,
        reply_markup: history.length
          ? { inline_keyboard: createHistoryButtons() }
          : { inline_keyboard: [] }
      });

      // Toast mini agar user tahu item sudah dihapus
      await bot.answerCallbackQuery(q.id, {
        text: `✔️ Riwayat ${e.ne1}${e.ne2 ? ` ↔ ${e.ne2}` : ''} dihapus.`,
        show_alert: false
      });
    } catch (err) {
      // Fallback: jika edit gagal (pesan kadaluarsa), kirim pesan baru
      await bot.sendMessage(message.chat.id, `✔️ Riwayat ${e.ne1}${e.ne2 ? ` ↔ ${e.ne2}` : ''} dihapus.`);
      await bot.sendMessage(message.chat.id, headerText, {
        reply_markup: history.length
          ? { inline_keyboard: createHistoryButtons() }
          : { inline_keyboard: [] }
      });
    }
  } else {
    await bot.answerCallbackQuery(q.id, { text: 'Item tidak ditemukan.', show_alert: false }).catch(()=>{});
  }
  return; // penting: akhiri handler di sini

  } catch(err){
    console.error('callback error:', err);
    bot.answerCallbackQuery(q.id, { text: '❌ Terjadi kesalahan. Coba lagi!', show_alert: true }).catch(()=>{});
  }
});

// ---------- Global error handlers (kirim ke admin) ----------
process.on('unhandledRejection', async (err) => {
  try { await sendToAdmins('❗ *UnhandledRejection*\n' + (err?.stack || err), { parse_mode: 'Markdown' }); } catch {}
  // jangan exit; biarkan jalan terus
});
process.on('uncaughtException', async (err) => {
  try { await sendToAdmins('❗ *UncaughtException*\n' + (err?.stack || err), { parse_mode: 'Markdown' }); } catch {}
  // exit agar systemd auto-restart
  setTimeout(() => process.exit(1), 500);
});

// ---------- Auto start WA bila di-enable ----------
if (WA_ENABLED) { sendToAdmins('ℹ️ Inisialisasi WhatsApp…'); waStart(lastChatId || null).catch(()=>{}); }
