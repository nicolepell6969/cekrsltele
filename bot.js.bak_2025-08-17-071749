// === CRYPTO SHIM (untuk Baileys) ===
(() => {
  try {
    const nodeCrypto = require('node:crypto');
    if (!globalThis.crypto) globalThis.crypto = nodeCrypto.webcrypto || nodeCrypto;
  } catch {
    try {
      const c = require('crypto');
      if (!globalThis.crypto) globalThis.crypto = c;
    } catch {}
  }
})();
require('dotenv').config({ path: __dirname + '/.env' });

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

let checkMetroStatus = null;
try { checkMetroStatus = require('./checkMetroStatus'); }
catch { console.error('WARN: checkMetroStatus.js tidak ditemukan'); }

let { buildCekCommandFromText } = (() => {
  try { return require('./textToCommand'); }
  catch { return { buildCekCommandFromText: (t)=>({cmd:null,list:[],note:'modul textToCommand.js tidak ada'}) }; }
})();

// === Admin store (persisten) ===
let adminStore = null;
try { adminStore = require('./adminStore'); adminStore.seedFromEnv?.(); }
catch {
  const FILE = path.join(__dirname,'admins.json');
  function _read(){ try{ if(!fs.existsSync(FILE)) return {admins:[]}; return JSON.parse(fs.readFileSync(FILE,'utf8')||'{"admins":[]}'); }catch{return{admins:[]}} }
  function _write(o){ try{ fs.writeFileSync(FILE, JSON.stringify(o,null,2)); }catch{} }
  function seedFromEnv(){ const ids=String(process.env.ADMIN_IDS||'').split(',').map(s=>s.trim()).filter(Boolean).map(x=>String(Number(x))).filter(Boolean); if(!ids.length) return; const o=_read(); const set=new Set((o.admins||[]).map(String)); ids.forEach(i=>set.add(i)); o.admins=[...set]; _write(o); }
  function listAdmins(){ return (_read().admins||[]).map(String); }
  function isAdmin(id){ return listAdmins().includes(String(id)); }
  function addAdmin(id){ const sid=String(Number(id)); if(!sid||sid==='NaN') throw new Error('ID tidak valid'); const o=_read(); const set=new Set((o.admins||[]).map(String)); set.add(sid); o.admins=[...set]; _write(o); return o.admins; }
  function removeAdmin(id){ const sid=String(Number(id)); const o=_read(); o.admins=(o.admins||[]).map(String).filter(x=>x!==sid); _write(o); return o.admins; }
  adminStore = { seedFromEnv, listAdmins, isAdmin, addAdmin, removeAdmin };
  adminStore.seedFromEnv();
}

// === Telegram init ===
const token = process.env.TELEGRAM_BOT_TOKEN || '';
if (!token) { console.error('ERROR: TELEGRAM_BOT_TOKEN kosong di .env'); process.exit(1); }
const bot = new TelegramBot(token, { polling: { interval: 800, autoStart: true } });

// === SendSafe (opsional) ===
try {
  const applySendSafe = require('./sendSafe');
  try { applySendSafe(bot); } catch {}
} catch {}

// === Helper kirim panjang aman (fallback sederhana) ===
async function sendLong(chatId, text, extra = {}) {
  const MAX = 3900;
  const t = String(text ?? '');
  if (t.length <= MAX) return bot.sendMessage(chatId, t, extra);
  const lines = t.split('\n');
  let buf = '';
  for (const line of lines) {
    const would = buf ? (buf + '\n' + line) : line;
    if (would.length > MAX) { await bot.sendMessage(chatId, buf, extra); buf = line; }
    else { buf = would; }
  }
  if (buf) await bot.sendMessage(chatId, buf, extra);
}

// === History (persisten) ===
const HIST_FILE = path.join(__dirname, 'history.json');
let history = [];
function loadHistory(){ try{ history = JSON.parse(fs.readFileSync(HIST_FILE,'utf8')); if(!Array.isArray(history)) history=[]; }catch{ history=[]; } }
function saveHistory(){ try{ fs.writeFileSync(HIST_FILE, JSON.stringify(history,null,2)); }catch{} }
function addHistory(ne1, ne2, resultText, keyword, start, end){
  history.push({ ne1, ne2, resultText, keyword, start, end });
  if (history.length > 50) history = history.slice(-50);
  saveHistory();
}
loadHistory();

// === Util ===
async function runWithTimeout(promise, ms){
  return await Promise.race([
    promise,
    new Promise((_,rej)=> setTimeout(()=>rej(new Error('Timeout')), ms))
  ]);
}
function createHistoryButtons(){
  const rows = history.map((e, i) => ([
    { text: `🔁 ${e.ne1}${e.ne2?` ↔ ${e.ne2}`:''}`, callback_data: `retry_${i}` },
    { text: '🗑 Hapus', callback_data: `delete_${i}` }
  ]));
  if (rows.length === 0) return [];
  return rows;
}

// === Log startup ===
bot.getMe()
  .then(me => console.log(`Telegram bot: @${me.username} (id:${me.id})`))
  .catch(e => console.error('getMe error:', e?.message));
bot.on('polling_error', (err)=> console.error('polling_error:', err?.response?.body || err?.message || err));

// === COMMAND & MESSAGE HANDLER ===
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();
  if (!text) return;

  const low = text.toLowerCase();

  // /help
  if (low === '/help') {
    return bot.sendMessage(chatId,
`Perintah:
• /cek <NE1> [NE2] — cek Metro-e (RX Level only)
• /history — riwayat cek (bisa cek ulang / hapus)
• /admin — lihat admin terdaftar`);
  }

  // /admin
  if (low === '/admin') {
    const list = adminStore.listAdmins();
    return bot.sendMessage(chatId, `Admin IDs: ${list.join(', ') || '(kosong)'}`);
  }

  // /cek
  if (low.startsWith('/cek')) {
    const parts = text.split(/\s+/).slice(1).filter(Boolean);
    if (parts.length === 0) return bot.sendMessage(chatId, '❗ Format: /cek <NE1> [NE2]');

    // 1 NE
    if (parts.length === 1) {
      const ne = parts[0];
      await bot.sendMessage(chatId, `🔄 Checking: ${ne}...`);
      try {
        const start = Date.now();
        const result = await runWithTimeout(checkMetroStatus.checkSingleNE(ne), Number(process.env.CEK_TIMEOUT_MS || 120000));
        const end = Date.now();
        addHistory(ne, null, result, ne, start, end);
        return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${result}`);
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 1 NE: '+(e?.message||e));
      }
    }

    // 2 NE (cek dua sisi, tapi TIDAK dobel kirim — kita kirim sekali gabungan)
    if (parts.length >= 2) {
      const ne1 = parts[0], ne2 = parts[1];
      await bot.sendMessage(chatId, `🔄 Checking: ${ne1} ↔ ${ne2}...`);
      try {
        const start = Date.now();
        const r1 = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
        const r2 = await runWithTimeout(checkMetroStatus(ne2, ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
        const end = Date.now();
        const combined = `${r1}\n────────────\n${r2}`;
        addHistory(ne1, ne2, combined, `${ne1} ${ne2}`, start, end);
        return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${combined}`);
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 2 sisi: '+(e?.message||e));
      }
    }

    // salah format
    return bot.sendMessage(chatId, '❗ Format: /cek <NE1> [NE2]');
  }

  // /history
  if (low === '/history') {
    if (!history.length) return bot.sendMessage(chatId, '❌ Belum ada riwayat pengecekan.');
    return bot.sendMessage(chatId, '👉 Klik di bawah untuk cek ulang atau hapus riwayat:', {
      reply_markup: { inline_keyboard: createHistoryButtons() }
    });
  }

  // Teks bebas — deteksi NE
  if (text) {
    const { list } = buildCekCommandFromText(text);
    if (list && list.length === 1) {
      const ne = list[0];
      return bot.sendMessage(chatId, `ℹ️ Hanya menemukan 1 NE dari teks.\nNE terdeteksi: ${ne}\n\nGunakan perintah ini:\n/cek ${ne}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek1_${ne}` }]] }
      });
    }
    if (list && list.length >= 2) {
      const a = list[0], b = list.find(x=>x!==a) || list[1];
      return bot.sendMessage(chatId, `NE terdeteksi: ${list.join(', ')}\n\nGunakan perintah ini:\n/cek ${a} ${b}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek_${a}_${b}` }]] }
      });
    }
  }
});

// ===== Callback (cek ulang, run now, hapus) =====
bot.on('callback_query', async (q) => {
  const { data, message } = q;
  const chatId = message.chat.id;
  try {
    await bot.answerCallbackQuery(q.id);

    if (data.startsWith('runcek_')) {
      const [, ne1, ne2] = data.split('_');
      await bot.sendMessage(chatId, `🔄 Checking: ${ne1} ↔ ${ne2}...`);
      const r1 = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
      const r2 = await runWithTimeout(checkMetroStatus(ne2, ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
      const end = Date.now();
      return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${r1}\n────────────\n${r2}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${ne1}_${ne2}` }]] }
      });
    }

    if (data.startsWith('runcek1_')) {
      const ne = data.substring('runcek1_'.length);
      await bot.sendMessage(chatId, `🔄 Checking: ${ne}...`);
      const result = await runWithTimeout(checkMetroStatus.checkSingleNE(ne), Number(process.env.CEK_TIMEOUT_MS || 120000));
      const end = Date.now();
      return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${result}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${ne}` }]] }
      });
    }

    if (data.startsWith('retry_')) {
      const index = parseInt(data.split('_')[1], 10);
      const e = history[index];
      if (e) {
        if (!e.ne2) {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1}...`);
          const result = await runWithTimeout(checkMetroStatus.checkSingleNE(e.ne1), Number(process.env.CEK_TIMEOUT_MS || 120000));
          const end = Date.now();
          return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${result}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${e.ne1}` }]] }
          });
        } else {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1} ↔ ${e.ne2}...`);
          const r1 = await runWithTimeout(checkMetroStatus(e.ne1, e.ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
          const r2 = await runWithTimeout(checkMetroStatus(e.ne2, e.ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
          const end = Date.now();
          return sendLong(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID',{timeZone:'Asia/Jakarta'})}\n\n${r1}\n────────────\n${r2}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${e.ne1}_${e.ne2}` }]] }
          });
        }
      }
    }

    if (data.startsWith('delete_')) {
      const index = parseInt(data.split('_')[1], 10);
      const e = history[index];
      if (e) {
        history.splice(index,1);
        saveHistory();
        // Auto refresh daftar history SESUAI permintaanmu:
        if (history.length) {
          return bot.editMessageText('👉 Klik di bawah untuk cek ulang atau hapus riwayat:', {
            chat_id: chatId,
            message_id: message.message_id,
            reply_markup: { inline_keyboard: createHistoryButtons() }
          });
        } else {
          return bot.editMessageText('❌ Belum ada riwayat pengecekan.', {
            chat_id: chatId,
            message_id: message.message_id
          });
        }
      }
    }
  } catch(err){
    console.error('callback error:', err);
    try { await bot.answerCallbackQuery(q.id, { text: '❌ Terjadi kesalahan. Coba lagi!', show_alert: true }); } catch {}
  }
});

// === OPTIONAL: kirim error penting ke admin pertama ===
function notifyAdmins(text){
  try{
    const admins = adminStore.listAdmins?.() || [];
    const target = admins[0];
    if (target) bot.sendMessage(Number(target), text).catch(()=>{});
  }catch{}
}
process.on('unhandledRejection', err=> notifyAdmins('⚠️ unhandledRejection: '+(err?.message||err)));
process.on('uncaughtException', err=> { notifyAdmins('⚠️ uncaughtException: '+(err?.message||err)); setTimeout(()=>process.exit(1), 500); });

// === global error handlers: kirim error ke admin & exit agar systemd restart ===
process.on('unhandledRejection', async (err) => {
  try { await bot.sendMessage((adminStore.listAdmins?.()[0])||'', '❗ *UnhandledRejection*\n' + (err?.stack || err)); } catch {}
});
process.on('uncaughtException', async (err) => {
  try { await bot.sendMessage((adminStore.listAdmins?.()[0])||'', '❗ *UncaughtException*\n' + (err?.stack || err)); } catch {}
  setTimeout(() => process.exit(1), 500);
});
