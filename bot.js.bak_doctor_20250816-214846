// === CRYPTO SHIM (untuk Baileys) ===
(() => {
  try {
    const nodeCrypto = require('node:crypto');
    if (!globalThis.crypto) globalThis.crypto = nodeCrypto.webcrypto || nodeCrypto;
  } catch {
    try {
      const c = require('crypto');
      if (!globalThis.crypto) globalThis.crypto = c;
    } catch {}
  }
})();
require('dotenv').config({ path: __dirname + '/.env' });

const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const QR = require('qrcode');

let checkMetroStatus = null;
try { checkMetroStatus = require('./checkMetroStatus'); }
catch { console.error('WARN: checkMetroStatus.js tidak ditemukan'); }

let { buildCekCommandFromText } = (() => {
  try { return require('./textToCommand'); }
  catch { return { buildCekCommandFromText: (t)=>({cmd:null,list:[],note:'modul textToCommand.js tidak ada'}) }; }
})();

// === Admin store (persisten) ===
let adminStore = null;
try { adminStore = require('./adminStore'); adminStore.seedFromEnv?.(); }
catch {
  const FILE = path.join(__dirname,'admins.json');
  function _read(){ try{ if(!fs.existsSync(FILE)) return {admins:[]}; return JSON.parse(fs.readFileSync(FILE,'utf8')||'{"admins":[]}'); }catch{return{admins:[]}} }
  function _write(o){ try{ fs.writeFileSync(FILE, JSON.stringify(o,null,2)); }catch{} }
  function seedFromEnv(){ const ids=String(process.env.ADMIN_IDS||'').split(',').map(s=>s.trim()).filter(Boolean).map(x=>String(Number(x))).filter(Boolean); if(!ids.length) return; const o=_read(); const set=new Set((o.admins||[]).map(String)); ids.forEach(i=>set.add(i)); o.admins=[...set]; _write(o); }
  function listAdmins(){ return (_read().admins||[]).map(String); }
  function isAdmin(id){ return listAdmins().includes(String(id)); }
  function addAdmin(id){ const sid=String(Number(id)); if(!sid||sid==='NaN') throw new Error('ID tidak valid'); const o=_read(); const set=new Set((o.admins||[]).map(String)); set.add(sid); o.admins=[...set]; _write(o); return o.admins; }
  function removeAdmin(id){ const sid=String(Number(id)); const o=_read(); o.admins=(o.admins||[]).map(String).filter(x=>x!==sid); _write(o); return o.admins; }
  adminStore = { seedFromEnv, listAdmins, isAdmin, addAdmin, removeAdmin };
  adminStore.seedFromEnv();
}

// === Telegram init ===
const token = process.env.TELEGRAM_BOT_TOKEN || '';
if (!token) { console.error('ERROR: TELEGRAM_BOT_TOKEN kosong di .env'); process.exit(1); }
const bot = new TelegramBot(token, { polling: { interval: 800, autoStart: true } });








const applySendSafe=require('./sendSafe');
try{applySendSafe(bot);}catch(e){console.error('WARN sendSafe:',e?.message||e)}
// === Force-safe long message sender ===
(function attachSafeSender(){
  try{
    const origSend = bot.sendMessage.bind(bot);

    function splitSmart(text, max=3900){
      const t = String(text ?? '');
      if (t.length <= max) return [t];

      // coba pecah di 


      const chunks = [];
      let rest = t;
      const push = (str)=>{ if (str && str.length) chunks.push(str); };

      function takeUntil(boundaryRegex){
        let out = '';
        while (rest.length){
          if (out.length + rest.length <= max){ out += rest; rest = ''; break; }
          // cari boundary terdekat sebelum max
          const slice = rest.slice(0, max - out.length);
          let cut = slice.search(boundaryRegex);
          if (cut === -1){ // tidak ketemu boundary; coba cari last newline/space
            const lastNl = slice.lastIndexOf('\n');
            const lastSp = slice.lastIndexOf(' ');
            cut = Math.max(lastNl, lastSp);
            if (cut <= 0) cut = slice.length; // terpaksa hard-cut
          }
          out += slice.slice(0, cut);
          rest = rest.slice(cut);
          break;
        }
        return out;
      }

      // strategi: ambil blok demi blok dengan preferensi 

      while (rest.length){
        let part = '';
        // 1) coba 


        part = takeUntil(/

(?![sS])/); // dummy regex untuk masuk ke fallback
        if (part.length === 0) part = rest.slice(0, Math.min(max, rest.length)), rest = rest.slice(part.length);

        // kalau masih terlalu panjang, pecah lagi di 
 atau spasi
        if (part.length > max){
          let p = part.slice(0, max);
          const lastNl = p.lastIndexOf('\n');
          const lastSp = p.lastIndexOf(' ');
          const cut = Math.max(lastNl, lastSp, 0) || p.length;
          push(p.slice(0, cut));
          rest = part.slice(cut) + rest;
        } else {
          push(part);
        }
      }
      // bersihkan potongan kosong
      return chunks.map(c => c).filter(Boolean);
    }

    // expose helper opsional
    bot.sendLong = async (chatId, text, extra={}) => {
      const parts = splitSmart(text, 3900);
      let last;
      for (const p of parts){
        // hindari error parse_mode karena potongan tidak sinkron
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };

    // Monkey-patch: semua pemanggilan sendMessage lewat pemecah
    bot.sendMessage = async (chatId, text, extra={}) => {
      if (typeof text !== 'string') return origSend(chatId, text, extra);
      const parts = splitSmart(text, 3900);
      if (parts.length === 1){
        // kirim biasa (hapus parse_mode bila mendekati limit)
        const safeExtra = { ...extra };
        if (text.length > 3800 && safeExtra.parse_mode) delete safeExtra.parse_mode;
        return origSend(chatId, text, safeExtra);
      }
      let last;
      for (const p of parts){
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };
  }catch(e){
    console.error('WARN attachSafeSender:', e && e.message ? e.message : e);
  }
})();
// === Force-safe long message sender ===
(function attachSafeSender(){
  try{
    const origSend = bot.sendMessage.bind(bot);

    function splitSmart(text, max=3900){
      const t = String(text ?? '');
      if (t.length <= max) return [t];

      // coba pecah di 


      const chunks = [];
      let rest = t;
      const push = (str)=>{ if (str && str.length) chunks.push(str); };

      function takeUntil(boundaryRegex){
        let out = '';
        while (rest.length){
          if (out.length + rest.length <= max){ out += rest; rest = ''; break; }
          // cari boundary terdekat sebelum max
          const slice = rest.slice(0, max - out.length);
          let cut = slice.search(boundaryRegex);
          if (cut === -1){ // tidak ketemu boundary; coba cari last newline/space
            const lastNl = slice.lastIndexOf('\n');
            const lastSp = slice.lastIndexOf(' ');
            cut = Math.max(lastNl, lastSp);
            if (cut <= 0) cut = slice.length; // terpaksa hard-cut
          }
          out += slice.slice(0, cut);
          rest = rest.slice(cut);
          break;
        }
        return out;
      }

      // strategi: ambil blok demi blok dengan preferensi 

      while (rest.length){
        let part = '';
        // 1) coba 


        part = takeUntil(/

(?![sS])/); // dummy regex untuk masuk ke fallback
        if (part.length === 0) part = rest.slice(0, Math.min(max, rest.length)), rest = rest.slice(part.length);

        // kalau masih terlalu panjang, pecah lagi di 
 atau spasi
        if (part.length > max){
          let p = part.slice(0, max);
          const lastNl = p.lastIndexOf('\n');
          const lastSp = p.lastIndexOf(' ');
          const cut = Math.max(lastNl, lastSp, 0) || p.length;
          push(p.slice(0, cut));
          rest = part.slice(cut) + rest;
        } else {
          push(part);
        }
      }
      // bersihkan potongan kosong
      return chunks.map(c => c).filter(Boolean);
    }

    // expose helper opsional
    bot.sendLong = async (chatId, text, extra={}) => {
      const parts = splitSmart(text, 3900);
      let last;
      for (const p of parts){
        // hindari error parse_mode karena potongan tidak sinkron
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };

    // Monkey-patch: semua pemanggilan sendMessage lewat pemecah
    bot.sendMessage = async (chatId, text, extra={}) => {
      if (typeof text !== 'string') return origSend(chatId, text, extra);
      const parts = splitSmart(text, 3900);
      if (parts.length === 1){
        // kirim biasa (hapus parse_mode bila mendekati limit)
        const safeExtra = { ...extra };
        if (text.length > 3800 && safeExtra.parse_mode) delete safeExtra.parse_mode;
        return origSend(chatId, text, safeExtra);
      }
      let last;
      for (const p of parts){
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };
  }catch(e){
    console.error('WARN attachSafeSender:', e && e.message ? e.message : e);
  }
})();
// === Force-safe long message sender ===
(function attachSafeSender(){
  try{
    const origSend = bot.sendMessage.bind(bot);

    function splitSmart(text, max=3900){
      const t = String(text ?? '');
      if (t.length <= max) return [t];

      // coba pecah di 


      const chunks = [];
      let rest = t;
      const push = (str)=>{ if (str && str.length) chunks.push(str); };

      function takeUntil(boundaryRegex){
        let out = '';
        while (rest.length){
          if (out.length + rest.length <= max){ out += rest; rest = ''; break; }
          // cari boundary terdekat sebelum max
          const slice = rest.slice(0, max - out.length);
          let cut = slice.search(boundaryRegex);
          if (cut === -1){ // tidak ketemu boundary; coba cari last newline/space
            const lastNl = slice.lastIndexOf('\n');
            const lastSp = slice.lastIndexOf(' ');
            cut = Math.max(lastNl, lastSp);
            if (cut <= 0) cut = slice.length; // terpaksa hard-cut
          }
          out += slice.slice(0, cut);
          rest = rest.slice(cut);
          break;
        }
        return out;
      }

      // strategi: ambil blok demi blok dengan preferensi 

      while (rest.length){
        let part = '';
        // 1) coba 


        part = takeUntil(/

(?![sS])/); // dummy regex untuk masuk ke fallback
        if (part.length === 0) part = rest.slice(0, Math.min(max, rest.length)), rest = rest.slice(part.length);

        // kalau masih terlalu panjang, pecah lagi di 
 atau spasi
        if (part.length > max){
          let p = part.slice(0, max);
          const lastNl = p.lastIndexOf('\n');
          const lastSp = p.lastIndexOf(' ');
          const cut = Math.max(lastNl, lastSp, 0) || p.length;
          push(p.slice(0, cut));
          rest = part.slice(cut) + rest;
        } else {
          push(part);
        }
      }
      // bersihkan potongan kosong
      return chunks.map(c => c).filter(Boolean);
    }

    // expose helper opsional
    bot.sendLong = async (chatId, text, extra={}) => {
      const parts = splitSmart(text, 3900);
      let last;
      for (const p of parts){
        // hindari error parse_mode karena potongan tidak sinkron
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };

    // Monkey-patch: semua pemanggilan sendMessage lewat pemecah
    bot.sendMessage = async (chatId, text, extra={}) => {
      if (typeof text !== 'string') return origSend(chatId, text, extra);
      const parts = splitSmart(text, 3900);
      if (parts.length === 1){
        // kirim biasa (hapus parse_mode bila mendekati limit)
        const safeExtra = { ...extra };
        if (text.length > 3800 && safeExtra.parse_mode) delete safeExtra.parse_mode;
        return origSend(chatId, text, safeExtra);
      }
      let last;
      for (const p of parts){
        const safeExtra = { ...extra };
        if (safeExtra.parse_mode) delete safeExtra.parse_mode;
        last = await origSend(chatId, p, safeExtra);
      }
      return last;
    };
  }catch(e){
    console.error('WARN attachSafeSender:', e && e.message ? e.message : e);
  }
})();
/** kirim pesan panjang aman untuk Telegram (tanpa kirim .txt) */
async function sendLong(chatId, text, extra = {}) {
  const MAX = 3900; // <4096, beri buffer
  const t = String(text ?? '');
  if (t.length <= MAX) return bot.sendMessage(chatId, t, extra);

  const lines = t.split('\n');
  let buf = '';
  for (const line of lines) {
    const would = buf ? (buf + '\n' + line) : line;
    if (would.length > MAX) {
      await bot.sendMessage(chatId, buf, extra);
      buf = line;
    } else {
      buf = would;
    }
  }
  if (buf) await bot.sendMessage(chatId, buf, extra);
}



// === Helper: kirim pesan ke semua admin dari ENV ADMIN_IDS atau adminStore ===
async function sendToAdmins(text, opts = {}) {
  try {
    let ids = [];
    try {
      if (adminStore?.listAdmins) ids = adminStore.listAdmins().map(String);
    } catch {}
    if (!ids.length) {
      ids = String(process.env.ADMIN_IDS || '')
        .split(',')
        .map(v => v.trim())
        .filter(Boolean);
    }
    // fallback: kirim ke chat terakhir yang memulai bot (jika ada) — abaikan jika tidak ada.
    if (!ids.length && typeof lastChatId !== 'undefined' && lastChatId) {
      ids = [String(lastChatId)];
    }
    for (const id of ids) {
      try { await bot.sendMessage(id, text, opts); } catch {}
    }
  } catch {}
}
bot.getMe().then(me=>console.log(`Telegram bot: @${me.username} (id:${me.id})`)).catch(e=>console.error('getMe error:', e?.message));
bot.on('polling_error', (err)=> console.error('polling_error:', err?.response?.body || err?.message || err));

// === WhatsApp (opsional) ===
let WA_ENABLED = (String(process.env.WA_ENABLED||'false').toLowerCase()==='true');
let waClient=null, makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion;
try { ({ default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion } = require('@whiskeysockets/baileys')); } catch {}

async function waStart(notifyChatId){
  if (!WA_ENABLED) return;
  if (waClient || !makeWASocket) return;
  const { state, saveCreds } = await useMultiFileAuthState(path.join(__dirname,'wa_auth'));
  let version = [2,3000,0]; try { ({ version } = await fetchLatestBaileysVersion()); } catch {}

  const sock = makeWASocket({ version, auth: state, printQRInTerminal:false, syncFullHistory:false, browser:['cekrsltele','Chrome','1.0'] });
  waClient = sock;
  sock.ev.on('creds.update', saveCreds);
  sock.ev.on('connection.update', (u)=>{
    const { connection, lastDisconnect, qr } = u;

    if (qr && notifyChatId){
      (async ()=>{
        try {
          const buf = await QR.toBuffer(qr, { type:'png', scale:8, margin:1 });
          await bot.sendPhoto(notifyChatId, buf, { caption: '📲 Scan QR WhatsApp (±60 detik). Jika expired, kirim /wa_pair lagi.' });
        } catch(e){
          try {
            const qrt = require('qrcode-terminal');
            let ascii=''; qrt.generate(qr,{small:true}, c=>ascii=c);
            await bot.sendMessage(notifyChatId, 'QR WhatsApp (fallback ASCII):\n\n'+ascii);
          } catch(e2){
            await bot.sendMessage(notifyChatId, 'Gagal render QR: '+(e?.message||e));
          }
        }
      })();
    }

    if (connection==='open' && notifyChatId) bot.sendMessage(notifyChatId,'✅ WhatsApp tersambung.');
    if (connection==='close'){
      const reason=(lastDisconnect && lastDisconnect.error && lastDisconnect.error.message)||'Terputus';
      if (notifyChatId) bot.sendMessage(notifyChatId, '⚠️ WhatsApp terputus: '+reason);
      waClient=null;
    }
  });
}
async function waStop(){ try{ if(waClient?.ws) waClient.ws.close(); }catch{} try{ await waClient?.end?.(); }catch{} waClient=null; }
function waStatusText(){ return `WA_ENABLED=${WA_ENABLED} | status=${waClient?'CONNECTED':'OFFLINE'}`; }

// === Utils ===
function isAdmin(chatId){ return adminStore.isAdmin(String(chatId)); }
function requireAdmin(chatId){ if (!isAdmin(chatId)) throw new Error('Not authorized'); }
function runWithTimeout(promise, ms=90000){
  return Promise.race([
    promise,
    new Promise((_,rej)=> setTimeout(()=>rej(new Error(`Timeout ${ms}ms`)), ms))
  ]);
}

// === History (ringkas) ===
const historyFilePath = './history.json';
let history = [];
try { if (fs.existsSync(historyFilePath)) { const raw = fs.readFileSync(historyFilePath); if (raw) history = JSON.parse(raw); } } catch{ history = []; }
function saveHistory(){ try{ fs.writeFileSync(historyFilePath, JSON.stringify(history,null,2)); } catch{} }
function isDuplicate(ne1, ne2){ return history.some(h => (h.ne1===ne1 && h.ne2===ne2) || (h.ne1===ne2 && h.ne2===ne1)); }
function addHistory(ne1, ne2, result, name, start, end){
  if (ne2 && isDuplicate(ne1, ne2)) return;
  const ts = new Date(start).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' });
  const s1 = (ne1.split('-')[1]||ne1).slice(0,4);
  const s2 = ne2 ? (ne2.split('-')[1]||ne2).slice(0,4) : '';
  const dur = (end-start)/1000;
  history.push({ name, ne1, ne2: ne2||'', shortNe1:s1, shortNe2:s2, result, timestamp:ts, duration:dur });
  saveHistory();
}
function createHistoryButtons(){
  return history.map((e,idx)=>([
    { text: `Ulangi ${e.shortNe1}${e.shortNe2?` ↔ ${e.shortNe2}`:''}`, callback_data: `retry_${idx}` },
    { text: `Hapus ${e.shortNe1}${e.shortNe2?` ↔ ${e.shortNe2}`:''}`, callback_data: `delete_${idx}` },
  ]));
}

// === HELP ===
const HELP = [
  '📋 Perintah:',
  '/help — daftar perintah',
  '/cek <NE1> [NE2] — cek 1 sisi (NE1) atau 2 sisi (NE1↔NE2)',
  '/history — tombol cek ulang / hapus riwayat',
  '/wa_status — status WhatsApp',
  '/wa_enable — aktifkan WhatsApp',
  '/wa_disable — nonaktifkan WhatsApp',
  '/wa_pair — minta QR login WhatsApp (dikirim ke sini)',
  '/add_admin <chatId> — tambah admin (khusus admin)',
  '/remove_admin <chatId> — hapus admin (khusus admin)'
].join('\n');

// === Handler pesan (Telegram) ===
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text||'').trim();
  const low = text.toLowerCase();

  // Admin only commands — jangan munculkan warning bila salah ketik
  if (low.startsWith('/add_admin') || low.startsWith('/remove_admin')) {
    try {
      requireAdmin(chatId);
      const parts = text.split(/\s+/);
      const id = parts[1];
      if (!id) return bot.sendMessage(chatId,'Format: /add_admin <chatId> atau /remove_admin <chatId>');
      if (low.startsWith('/add_admin')) {
        adminStore.addAdmin(id);
        return bot.sendMessage(chatId, `✅ Admin ditambah: ${id}`);
      } else {
        adminStore.removeAdmin(id);
        return bot.sendMessage(chatId, `✅ Admin dihapus: ${id}`);
      }
    } catch {
      return bot.sendMessage(chatId, '❌ Kamu bukan admin.');
    }
  }

  // HELP
  if (low === '/help') return bot.sendMessage(chatId, HELP);

  // WA controls
  if (low === '/wa_status') return bot.sendMessage(chatId, waStatusText());
  if (low === '/wa_enable') {
    try { requireAdmin(chatId); } catch { return bot.sendMessage(chatId,'❌ Kamu bukan admin.'); }
    WA_ENABLED = true;
    bot.sendMessage(chatId, '✅ WA_ENABLED=true. Memulai koneksi…');
    waStart(chatId).catch(e=> bot.sendMessage(chatId,'Gagal start WA: '+(e?.message||e)));
    return;
  }
  if (low === '/wa_disable') {
    try { requireAdmin(chatId); } catch { return bot.sendMessage(chatId,'❌ Kamu bukan admin.'); }
    WA_ENABLED = false;
    await waStop();
    return bot.sendMessage(chatId, '✅ WA dinonaktifkan.');
  }
  if (low === '/wa_pair') {
    try { requireAdmin(chatId); } catch { return bot.sendMessage(chatId,'❌ Kamu bukan admin.'); }
    if (!WA_ENABLED) return bot.sendMessage(chatId,'ℹ️ WA belum diaktifkan. Jalankan /wa_enable dulu.');
    waStart(chatId).catch(e=> bot.sendMessage(chatId,'Gagal pair WA: '+(e?.message||e)));
    return;
  }

  // ===== /cek =====
  if (/^\/cek(\s+|$)/.test(low)) {
    const tail = text.slice(4); // buang "/cek"
    const parts = tail.split(/\s+/).map(s=>s.trim()).filter(Boolean);

    // 1 NE
    if (parts.length === 1) {
      const ne = parts[0];
      await bot.sendMessage(chatId, `🔄 Cek satu NE: ${ne} …`);
      try {
        const start = Date.now();
        const result = await runWithTimeout(
          (checkMetroStatus && checkMetroStatus.checkSingleNE)
            ? checkMetroStatus.checkSingleNE(ne)
            : Promise.reject(new Error('checkMetroStatus.checkSingleNE tidak tersedia')),
          Number(process.env.CEK_TIMEOUT_MS || 120000)
        );
        const end = Date.now();
        addHistory(ne, null, result, ne, start, end);
        return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`);
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 1 NE: '+(e?.message||e));
      }
    }

    // 2 NE
    if (parts.length >= 2) {
      const ne1 = parts[0], ne2 = parts[1];
      await bot.sendMessage(chatId, `🔄 ONCEK, DITUNGGU`);
      try {
        const start = Date.now();
        const r1 = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
        const r2 = await runWithTimeout(checkMetroStatus(ne2, ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
        const end = Date.now();
        const combined = `${r1}\n────────────\n${r2}`;
        addHistory(ne1, ne2, combined, `${ne1} ${ne2}`, start, end);
        return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${combined}`, {
          reply_markup: { inline_keyboard: [[{ text: '🔁 CEK ULANG', callback_data: `retry_last_${history.length-1}` }]] }
        });
      } catch(e){
        return bot.sendMessage(chatId, '❌ Gagal cek 2 sisi: '+(e?.message||e));
      }
    }

    // salah format
    return bot.sendMessage(chatId, '❗ Format: /cek <NE1> [NE2]');
  }

  // ===== /history =====
  if (low === '/history') {
    if (!history.length) return bot.sendMessage(chatId, '❌ Belum ada riwayat pengecekan.');
    return bot.sendMessage(chatId, '👉 Klik di bawah untuk cek ulang atau hapus riwayat:', {
      reply_markup: { inline_keyboard: createHistoryButtons() }
    });
  }

  // ===== Teks bebas -> parsing NE =====
  if (text) {
    const { cmd, list, note } = buildCekCommandFromText(text);
    if (list && list.length === 1) {
      const ne = list[0];
      return bot.sendMessage(chatId, `ℹ️ Hanya menemukan 1 NE dari teks.\nNE terdeteksi: ${ne}\n\nGunakan perintah ini:\n/cek ${ne}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek1_${ne}` }]] }
      });
    }
    if (list && list.length >= 2) {
      const a = list[0], b = list.find(x=>x!==a) || list[1];
      return bot.sendMessage(chatId, `NE terdeteksi: ${list.join(', ')}\n\nGunakan perintah ini:\n/cek ${a} ${b}`, {
        reply_markup: { inline_keyboard: [[{ text: '▶️ Jalankan sekarang', callback_data: `runcek_${a}_${b}` }]] }
      });
    }
  }

  // BUKAN perintah & bukan teks yang bisa diparse → jangan spam warning
});

// ===== Callback (cek ulang, run now, hapus) =====
bot.on('callback_query', async (q)=>{
  const { data, message } = q;
  const chatId = message.chat.id;
  try {
    await bot.answerCallbackQuery(q.id);

    if (data.startsWith('runcek_')) {
      const [, ne1, ne2] = data.split('_');
      await bot.sendMessage(chatId, `🔄 Checking: ${ne1} ↔ ${ne2}...`);
      const r1 = await runWithTimeout(checkMetroStatus(ne1, ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
      const r2 = await runWithTimeout(checkMetroStatus(ne2, ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
      const end = Date.now();
      return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${r1}\n────────────\n${r2}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${ne1}_${ne2}` }]] }
      });
    }

    if (data.startsWith('runcek1_')) {
      const ne = data.substring('runcek1_'.length);
      await bot.sendMessage(chatId, `🔄 Checking: ${ne}...`);
      const result = await runWithTimeout(checkMetroStatus.checkSingleNE(ne), Number(process.env.CEK_TIMEOUT_MS || 120000));
      const end = Date.now();
      return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`, {
        reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${ne}` }]] }
      });
    }

    if (data.startsWith('retry_')) {
      let index = null;
      if (data.startsWith('retry_last_')) index = parseInt(data.split('_').pop(), 10);
      else index = parseInt(data.split('_')[1], 10);
      const e = history[index];
      if (e) {
        if (!e.ne2) {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1}...`);
          const result = await runWithTimeout(checkMetroStatus.checkSingleNE(e.ne1), Number(process.env.CEK_TIMEOUT_MS || 120000));
          const end = Date.now();
          return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${result}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek1_${e.ne1}` }]] }
          });
        } else {
          await bot.sendMessage(chatId, `🔄 Checking: ${e.ne1} ↔ ${e.ne2}...`);
          const r1 = await runWithTimeout(checkMetroStatus(e.ne1, e.ne2, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
          const r2 = await runWithTimeout(checkMetroStatus(e.ne2, e.ne1, { mode: 'normal' }), Number(process.env.CEK_TIMEOUT_MS || 180000));
          const end = Date.now();
          return bot.sendMessage(chatId, `🕛Checked Time: ${new Date(end).toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' })}\n\n${r1}\n────────────\n${r2}`, {
            reply_markup: { inline_keyboard: [[{ text: '🔁 Cek ulang', callback_data: `runcek_${e.ne1}_${e.ne2}` }]] }
          });
        }
      }
    }

    if (data.startsWith('delete_')) {
      const index = parseInt(data.split('_')[1], 10);
      const e = history[index];
      if (e) {
        history.splice(index,1); saveHistory();
        return bot.sendMessage(chatId, `✅ Riwayat ${e.ne1}${e.ne2?` ↔ ${e.ne2}`:''} dihapus.`);
      }
    }
  } catch(err){
    console.error('callback error:', err);
    bot.answerCallbackQuery(q.id, { text: '❌ Terjadi kesalahan. Coba lagi!', show_alert: true }).catch(()=>{});
  }
});

// === OPTIONAL: kirim error penting ke admin pertama ===
function notifyAdmins(text){
  const admins = adminStore.listAdmins();
  const target = admins[0];
  if (target) bot.sendMessage(Number(target), text).catch(()=>{});
}
process.on('unhandledRejection', err=> notifyAdmins('⚠️ unhandledRejection: '+(err?.message||err)));
process.on('uncaughtException', err=> { notifyAdmins('⚠️ uncaughtException: '+(err?.message||err)); setTimeout(()=>process.exit(1), 500); });


// === global error handlers: kirim error ke admin & exit agar systemd restart ===
process.on('unhandledRejection', async (err) => {
  try { await sendToAdmins('❗ *UnhandledRejection*\n' + (err?.stack || err)); } catch {}
  // tidak exit, biar lanjut jalan
});
process.on('uncaughtException', async (err) => {
  try { await sendToAdmins('❗ *UncaughtException*\n' + (err?.stack || err)); } catch {}
  // exit biar systemd auto-restart
  setTimeout(() => process.exit(1), 500);
});
